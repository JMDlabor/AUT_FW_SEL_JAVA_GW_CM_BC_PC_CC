


		Maven
		----------------------------------------------------------------------------------
		----------------------------------------------------------------------------------

	
		<test name="ChromeTest2" parallel="methods" thread-count="2">
			<parameter name="StrBrowser" value="Chrome" />
			<parameter name="TD_Username" value="9003130341" />
			<parameter name="TD_password" value="U3JlRS5BdWcyMA==" />
			<parameter name="TD_ProdType" value="Books" />
			<parameter name="TD_ProdName"
				value="Call Me by Your Name: A Novel (International Edition)" />
			<classes>
				<class name="com.wrapers.BaseTest">
					<methods>
						<exclude name=".*" />
					</methods>
				</class>
				<class name="com.amazon.AmazonTest1">
					<methods>
						<exclude name=".*" />
					</methods>
				</class>
			</classes>
		</test> <!-- Test -->
	


	
		xpath example
		----------------------------------------------------------------------------------
		----------------------------------------------------------------------------------
		final By Quote_New_Submission = By.xpath("//div[contains(@id,'QuoteTypeToolbarButtonSet-Quote')]");
		final By Payment_Screen_Billing_Method = By.xpath("//div[contains(@id,'BillingPanel-BillingMethod')]");
		final By Payment_Schedule_Monthly_Schedule = By.xpath("//div[contains(@id,'5-InstallmentPlan_radio')]");
	
	
		code example
		----------------------------------------------------------------------------------
		----------------------------------------------------------------------------------

		Wait
		----------------------------------------------------------------------------------
		GuidewireAutomate_waitForElement(Update_Button, "visibilityOf", "NA");
		GuidewireAutomate_waitForElement(Select_SearchResult, "elementToBeSelected", "NA");
		
		Edit
		----------------------------------------------------------------------------------
		final By CA_HomePhone = By.xpath("//div[contains(text(),'Home Phone')]/following-sibling::div//input[contains(@name,'HomePhone')]");
	
		GuidewireAutomate("addresstype", addresstype, "selectByVisibleText", lhm_Data.get("TD_Addresstype"));
		
		Dropdown
		----------------------------------------------------------------------------------
		GuidewireAutomate("Organization Name", OS_OrganizationName, "sendkeys",  lhm_Data.get("TD_OrganizationName"));
		GuidewireAutomate("Organization Name", OS_OrganizationName, "clearAndsendkeys",  lhm_Data.get("TD_OrganizationName"));
		
		Button/Link/Radio
		----------------------------------------------------------------------------------
		GuidewireAutomate("NewAccount", NewAccount, "moveToElement", "NA");
		GuidewireAutomate_waitForElement(Select_SearchResult, "elementToBeClickable", "NA");
		GuidewireAutomate("Search_Button", Search_Button, "click", "NA");
		
		Validation
		----------------------------------------------------------------------------------
		GuidewireAutomate_Validation("Account Summary", GW_TabNavigation_CM_PC_BC_CC.AccountSummary_Name, "contains", "ScreenName");
		GuidewireAutomate_Validation("Producer Status", ProducerStatus, "equals", "Active");	

		Handle
		----------------------------------------------------------------------------------		
		GuidewireAutomate_Handle("alertaccept", ""); 
		GuidewireAutomate_Handle("alertdismisst", ""); 
		GuidewireAutomate_Handle("childwindow", "<<childwindowid>>");
		GuidewireAutomate_Handle("parentwindow", "<<parentwindowid>>");
		
		
		
		Reusable Code samples
		----------------------------------------------------------------------------------
		----------------------------------------------------------------------------------
		----------------------------------------------------------------------------------
		
		Table Add/Remove
		----------------------------------------------------------------------------------
		----------------------------------------------------------------------------------
		
		PO class
		----------------------------------------------------------------------------------
		
		final By RA_Tab_PriorPolicies = By.xpath(
				"//div[contains(@id,'RiskAnalysisCV-PriorPolicyCardTab')]//div[@class='gw-label' and text()='Prior Policies']");
	
		final By RA_PP_PriorPolicies = By.xpath(
				"//div[contains(@class,'gw-LabelWidget')]/div[contains(@class,'gw-label') and text()='Prior Policies']");
		final By CA_PleaseConfirmAccountInformation = By.xpath(
			"//div[contains(@class,'gw-VerbatimWidget--inner') and text()='Please confirm account information']");
			//div[contains(@class,'gw-boldLabel') and text()='Address']
			//div[contains(@class,'gw-TitleBarWidget')]//div[@class='gw-TitleBar--title' and @role='heading' and text()='Driver']
	
		final By RA_PP_Add_Button = By.xpath("//div[contains(@id,'PriorPolicyLV_tb-Add')]/div[@role='button']");
		final By RA_PP_Remove_Button = By.xpath("//div[contains(@id,'PriorPolicyLV_tb-Remove')]/div[@role='button']");
	
		final By RA_PP_Select = By.xpath(
				"//tr[contains(@id,'PriorPolicyLV') and contains(@class,'gw-standard-row')]/td[contains(@class,'gw-impl-cell--CB')]//div[contains(@id,'_Checkbox') and contains(@class,'gw-IteratorEntryCheckBoxWidget')]/input[@type='checkbox']");
	
		final By RA_PP_Carrier = By.xpath(
				"//tr[contains(@id,'PriorPolicyLV') and contains(@class,'gw-standard-row')]/td[contains(@id,'Carrier_Cell') and contains(@class,'gw-CellWidget')]//div[contains(@id,'Carrier') and contains(@class,'gw-editable')]//input[contains(@name,'Carrier')]");	
		final By RA_PP_EffectiveDate = By.xpath(
			"//tr[contains(@id,'PriorPolicyLV') and contains(@class,'gw-standard-row')]/td[contains(@id,'EffectiveDate_Cell') and contains(@class,'gw-CellWidget')]//div[contains(@id,'EffectiveDate') and contains(@class,'gw-editable')]//input[contains(@name,'EffectiveDate')]");

			
		Module class
		----------------------------------------------------------------------------------
		Selenium_Utils_DataBase oDB = new Selenium_Utils_DataBase();
	
			lhm_TestCase_Table_Data = oDB.getData_MSExcel_WorkSheet_Fillo("Risk_Analysis", strTestCaseName);



		if (lhm_TestCase_Table_Data.get("PrimaryNI_Name").contains("global")) {
			GuidewireAutomate_Validation("Name", PrimaryNamedInsured_Name, "equal", strAccountName);
		} else if (lhm_TestCase_Table_Data.get("PrimaryNI_Name").contains("refer")){
			GuidewireAutomate_Validation("Name", PrimaryNamedInsured_Name, "equal",
					lhm_TestCase_Data.get("PrimaryNI_Name"));
		} else {
			GuidewireAutomate_Validation("Name", PrimaryNamedInsured_Name, "equal",
					lhm_TestCase_Table_Data.get("PrimaryNI_Name"));
		}
	
		// Validating Risk Analysis screen


		GuidewireAutomate_Validation("Screen Header", GW_PolicyCenter_Resuables_PO.Screen_Header, "equals", "Policy Info");
	
		GuidewireAutomate("Prior Policies Tab", RA_Tab_PriorPolicies, "click", "NA");

		GuidewireAutomate_Validation("Prior Policies", RA_PP_PriorPolicies, "equals", "Prior Policies");
		
		//Add
		GuidewireAutomate("Add", RA_PP_Add_Button, "click", "NA");
		GuidewireAutomate("Carrier", RA_PP_Carrier, "sendkeys", lhm_TestCase_Table_Data.get("RA_PP_Carrier"));
		GuidewireAutomate("Effective Date", RA_PP_EffectiveDate, "sendkeys", lhm_TestCase_Table_Data.get("RA_PP_ExpirationDate"));

		//Remove
		GuidewireAutomate("Select policy", RA_PP_Select, "click", "NA");		
		GuidewireAutomate("Remove", RA_PP_Remove_Button, "click", "NA");

		lhm_TestCase_Data.putAll(lhm_TestCase_Table_Data);
		lhm_TestCase_Table_Data.clear();



























public LinkedHashMap<String, String> getData(String process, String dataName,LinkedHashMap<String, String> configData)



	LinkedHashMap<String, String> data = new LinkedHashMap<String, String>();

	List<LinkedHashMap<String, String>> tdNameReference = Helper.ReadCSV_getRowDataForMatch(Driver.configDataPath + "\\TestDataNameReference.csv", "DataName=" + dataName, false);


		// This method is used to get all the data from CSV file which matches your * requirement

		public static List<LinkedHashMap<String, String>> ReadCSV_getRowDataForMatch(String filePath, String Matches,boolean readAllRow) throws Exception {

			List<LinkedHashMap<String, String>> dataList = new ArrayList<LinkedHashMap<String, String>>();


			reader = new CSVReader(new FileReader(filePath));
			List<String[]> csvBody = reader.readAll();
			reader.close();
			List<Integer> rows = findRowNumberCSVForMatch(filePath, Matches, readAllRow);

			if (rows.size() == 0) {
				throw new Exception("Data[" + Matches + "] not found in[" + filePath + "]");
			}

			
			String columns[] = csvBody.get(0);


			// This method is used to find the row number in csv file against the dataname

			private static List<Integer> findRowNumberCSVForMatch(String filePath, String dataName, boolean readAllRow) throws Exception {

				List<Integer> rowNos = new ArrayList<Integer>();
				return rowNos;

			line = csvBody.get(rowNo);

			LinkedHashMap<String, String> data = new LinkedHashMap<String, String>();

			data.put(columns[i], line[i]);

	


				dataList.add(data);


	public static void updateCSV(String filePath, String match, String columnName, String valueToBeUpdated)
	public static void updateCSVWithRowNum(String filePath, int rownum, String columnName, String valueToBeUpdated)
		int col = findColumnNumberCSV(filePath, columnName);



